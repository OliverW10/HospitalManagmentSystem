xyzController uses MenuBuilder to create a menuSpec, and then passes it to a menu provider service which produces a IMenu which has an Execute which displays the menu and returns the next one.
OR
xyzController uses a MenuBuilder to build the menu, which then returns a delegate which gets the next menu

MenuSpecification - value object defining how a menu should behave
MenuSpecificationBuilder - fluent api to create a MenuSpecification and then pass it to a IMenu
IMenu (ConsoleMenu) - can display a menu from a MenuSpecification
IMenuFactory - injected service to create an IMenu, would just call new ConcreeteMenu(givenMenuSpec)
XyzController - expresses the business logic by using MenuSpecificationBuilder to create a IMenu


class ExampleOptionController {
	GetMyExampleMenu() {
		return MenuBuilder
			.title("yerrp")
			.option("Wussup? ", adminController.GetAdminMenu)
			.build();
	}
}

class ExamplePromptController {
	GetMyExampleMenu() {
		var localParams = {username?: null, password?: null};
		return MenuBuilder
			.title("asdf")
			.prompt<StringPrompt>("username: ", ans => localParams.username = ans)
			.prompt<PasswordPrompt>("Password: ", ans => localParams.password = ans)
			.FinishPrompting(() => HandleLogin(localParams))
			.Build()
	}

	HandleLogin(params) {
		if(login exists and is correct) {
			return relevantController.GetRelevantMenu();
		} else {
			return this.GetMyExampleMenu();
		}
	}
}